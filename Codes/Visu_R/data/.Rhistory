# devel version:
remotes::install_github("tidyverse/purrr") # voir https://purrr.tidyverse.org/
remotes::install_github("ThinkR-open/rtodoist")
}
library(rtodoist)
install.packages("rtodoist")
# Exemple de code pour l'installation de rtodoist
if (!"rtodoist" %in% installed.packages()[,1]) {
# devel version:
remotes::install_github("tidyverse/purrr") # voir https://purrr.tidyverse.org/
remotes::install_github("ThinkR-open/rtodoist")
}
library(rtodoist)
# Pour récupérer votre token, taper :
open_todoist_website_profile(verbose = TRUE)
# puis cliquer sur l'onglet "Développeur" et "Copier la clé API"
# Coller cette clé (= le token) dans la fenêtre qui s'ouvre lorsque vous tapez l'instruction ci-dessous
invisible(set_todoist_api_token())
# Pour récupérer votre token, taper :
open_todoist_website_profile(verbose = TRUE)
# puis cliquer sur l'onglet "Développeur" et "Copier la clé API"
# Coller cette clé (= le token) dans la fenêtre qui s'ouvre lorsque vous tapez l'instruction ci-dessous
invisible(set_todoist_api_token())
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# puis cliquer sur l'onglet "Développeur" et "Copier la clé API"
# Coller cette clé (= le token) dans la fenêtre qui s'ouvre lorsque vous tapez l'instruction ci-dessous
invisible(set_todoist_api_token())
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Exemple de code pour l'installation de rtodoist
if (!"rtodoist" %in% installed.packages()[,1]) {
# devel version:
remotes::install_github("tidyverse/purrr") # voir https://purrr.tidyverse.org/
remotes::install_github("ThinkR-open/rtodoist")
}
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
# Rajoute un espace TOTO dans les espaces Perso de first@gmail.com (vérifier sa présence sur Todoist)
add_project("TOTO")
add_tasks_in_project(project_name = "TOTO", tasks = "my_task") # Rajoute une tâche
add_tasks_in_project(project_name = "TOTO", tasks = "my_task") # Rajoute une tâche
R.version
x=rnorm(50)
x
x=rnorm(50,3,1)
x
e=rnorm(50,0,1)
e
y <- 1+4*x+e
plot(x,y)
mod1 <- lm(y~x)
summary(mod1)
plot(mod1)
abline(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
abline(mod1)
plot(mod1)
plot(mod1)
abline(mod1)
abline(mod1)
abline(mod1)
x
model.matrix(y~x)
summary(mod1)
mean(y)
#Le point de coord (moyenne_x,moyenne_y) est le centre de gravité, la droite de régression passe forcément par ce point
mean(x)
mean(y)
mod1
#Le point de coord (moyenne_x,moyenne_y) est le centre de gravité, la droite de régression passe forcément par ce point
mean(x)
mean(y)
#Le point de coord (moyenne_x,moyenne_y) est le centre de gravité, la droite de régression passe forcément par ce point
mean(x)
mean(y)
plot(mod1)
plot(x,y)
abline(mod1)
#Le point de coord (moyenne_x,moyenne_y) est le centre de gravité, la droite de régression passe forcément par ce point
mean(x)
mean(y)
#On recalcul le modèle avec x et y centré
xc <- x-xm
#Le point de coord (moyenne_x,moyenne_y) est le centre de gravité, la droite de régression passe forcément par ce point
xm <- mean(x)
ym <- mean(y)
#On recalcul le modèle avec x et y centré
xc <- x-xm
yc <- y_ym
modC <- lm(yc~xc)
#On recalcul le modèle avec x et y centré
xc <- x-xm
yc <- y_ym
yc <- y-ym
modC <- lm(yc~xc)
summary(modc)
modc <- lm(yc~xc)
summary(modc)
modc <- lm(yc~xc-1)
summary(modc)
B0 <- reg1$coefficients[[1]]
B1 <- reg1$coefficients[[2]]
B0 <- mod1$coefficients[[1]]
B1 <- mod1$coefficients[[2]]
B0 + B1*ym
B0
xm
B1
ym
modc
modc[1]
modc[1,3]
modc[1,2]
modc[1,1]
modc[3]
modc[4]
modc$coefficients
modc$coefficients+5
modc$coefficients-mod1$coefficients
#ANOVA
sample(c("ctrl","trt"),50,replace=T)
#ANOVA
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ctrl","trt"),50,replace=T)
f <- factor(f)
f
#ANOVA
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ztrl","trt"),50,replace=T)
f <- factor(f)
f
#ANOVA
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ctrl","trt"),50,replace=T)
f <- factor(f)
f
relevel(f,c("trt","ctrl"))
relevel(f,"trt","ctrl")
e <- rnorm(50,0,1)
which(f==ctrl)
which(f=="ctrl")
f[which(f=="ctrl")]
#
y=10-2*f[which(f=="ctrl")]+4*f[which(f=='trt')]
#
y=10-2*(f=="ctrl")+4*(f=='trt')
y
mod2 <- lm(y~f)
summary(mod2)
plot(f,y)
model.matrix(y~f)
table(f)
y
mean(y[which(f=="ctrl")])
mean(y[which(f=="trt")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="trt")])-mean(y[which(f=="ctrl")])
#ANOVA
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ctrl","trt"),50,replace=T)
f <- factor(f)
relevel(f,"trt","ctrl")
#Erreur
e <- rnorm(50,0,1)
#
y=10-2*(f=="ctrl")+4*(f=='trt')
#Création du model
mod2 <- lm(y~f)
summary(mod2)
#Matrice de désign X :
model.matrix(y~f)
#La moyenne de "ctrl" à la même valeur que l'intercept
mean(y[which(f=="ctrl")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="trt")])-mean(y[which(f=="ctrl")])
#On change l'ordre des facteurs
f <- relevel(f,"trt","ctrl")
f
#
y=10-2*(f=="ctrl")+4*(f=='trt')
#Création du model
mod2 <- lm(y~f)
summary(mod2)
#Matrice de désign X :
model.matrix(y~f)
#La moyenne de "ctrl" à la même valeur que l'intercept
mean(y[which(f=="ctrl")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="trt")])-mean(y[which(f=="ctrl")])
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ctrl","trt","sexe"),50,replace=T)
f <- factor(f)
#ANOVA à deux facteurs
#Création d'une variable à deux facteurs de 50 individus
f <- sample(c("ctrl","trt"),50,replace=T)
f <- factor(f)
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","sexe"),50,replace=T)
f3 <- factor(f)
#Erreur
e3 <- rnorm(50,0,1)
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","sex"),50,replace=T)
f3 <- factor(f)
#Erreur
e3 <- rnorm(50,0,1)
#Création de l'eq Y
y3=10-2*(f3=="ctrl")+4*(f3=='trt')+5*(f3=='sex')
#Création du model
mod3 <- lm(y3~f3)
summary(mod3)
f3
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","sex"),50,replace=T)
f3 <- factor(f3)
f3
#Erreur
e3 <- rnorm(50,0,1)
#Création de l'eq Y
y3=10-2*(f3=="ctrl")+4*(f3=='trt')+5*(f3=='sex')
#Création du model
mod3 <- lm(y3~f3)
summary(mod3)
#Création de l'eq Y
y=10-2*(f=="ctrl")+4*(f=='trt')+e
#Création du model
mod2 <- lm(y~f)
summary(mod2)
#Matrice de désign X :
model.matrix(y~f)
#La moyenne de "ctrl" à la même valeur que l'intercept
mean(y[which(f=="ctrl")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="trt")])-mean(y[which(f=="ctrl")])
#Création de l'eq Y
y3=10-2*(f3=="ctrl")+4*(f3=='trt')+5*(f3=='sex')+e
#Création du model
mod3 <- lm(y3~f3)
summary(mod3)
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","placebo"),50,replace=T)
f3 <- factor(f3)
#Erreur
e3 <- rnorm(50,0,1)
#Création de l'eq Y
y3=10-2*(f3=="ctrl")+4*(f3=='trt')+5*(f3=='sex')+e
#Création du model
mod3 <- lm(y3~f3)
summary(mod3)
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","trt2"),50,replace=T)
f3 <- factor(f3)
#Erreur
e3 <- rnorm(50,0,1)
f3 <- relevel(f,"trt")
f3 <- relevel(f3,"trt")
f3
#ANOVA a 3 facteurs
#Création d'une variable à deux facteurs de 50 individus
f3 <- sample(c("ctrl","trt","trt2"),50,replace=T)
f3 <- factor(f3)
f3 <- relevel(f3,"trt")
f3
#Erreur
e3 <- rnorm(50,0,1)
#Création de l'eq Y
y3=10-2*(f3=="ctrl")+4*(f3=='trt')+5*(f3=='trt2')+e
#Création du model
mod3 <- lm(y3~f3)
summary(mod3)
#Matrice de désign X :
model.matrix(y~f)
#Matrice de désign X :
model.matrix(y3~f3)
#La moyenne de "ctrl" à la même valeur que l'intercept
mean(y[which(f3=="ctrl")])
summary(mod3)
#La moyenne de "ctrl" à la même valeur que l'intercept
mean(y[which(f3=="trt")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="trt")])-mean(y[which(f=="ctrl")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y[which(f=="ctrl")])-mean(y[which(f=="trt")])
#Paramètre 3
mean(y[which(f=="ctrl")])-mean(y[which(f=="trt")])-mean(y[which(f=="trt2")])
#Paramètre 3
mean(y[which(f=="trt2")])-mean(y[which(f=="ctrl")])-mean(y[which(f=="trt")])
#Paramètre 3
mean(y[which(f=="trt2")])-mean(y[which(f=="ctrl")])-mean(y[which(f=="trt")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y3[which(f3=="ctrl")])-mean(y3[which(f3=="trt")])
#Paramètre 3
mean(y3[which(f3=="trt2")])-mean(y3[which(f3=="ctrl")])-mean(y3[which(f3=="trt")])
summary(mod3)
#La moyenne de "trt" à la même valeur que l'intercept
mean(y[which(f3=="trt")])
#La moyenne de "trt" à la même valeur que l'intercept
mean(y3[which(f3=="trt")])
summary(mod3)
#La moyenne de "trt" à la même valeur que l'intercept
mean(y3[which(f3=="trt")])
#La différence des moyennes entre trt et ctrl à la même valeur que l'estimate B2
mean(y3[which(f3=="ctrl")])-mean(y3[which(f3=="trt")])
#Paramètre 3
mean(y3[which(f3=="trt2")])-mean(y3[which(f3=="ctrl")])-mean(y3[which(f3=="trt")])
#Paramètre 3
mean(y3[which(f3=="trt2")])-mean(y3[which(f3=="trt")])
lm(y3~f3,contr.sum="contr.sum")
lm(y3~f3,contr.sum())
lm(y3~f3,contr.sum(50))
lm(y3~f3,contrasts = "contr.sum")
lm(y3~f3,contrasts = list("contr.sum"))
help(lm)
#
mean(y3[which(f3=="trt2")])
#
mod3$coefficients
mean(y3[which(f3=="trt2")])
#
mod3$coefficients[1]
#
mod3$coefficients[2]+mod3$coefficients[3]
#
mod3$coefficients[2]+mod3$coefficients[3]
mean(y3[which(f3=="trt")])
#Nouveau modèle avec comme contrainte B1+B2+B3=0
lm(y3~f3,contrasts = list(f="contr.sum"))
#Nouveau modèle avec comme contrainte B1+B2+B3=0
lm(y3~f3,contrasts = list(f3="contr.sum"))
#Nouveau modèle avec comme contrainte B1+B2+B3=0
mod_c <- lm(y3~f3,contrasts = list(f3="contr.sum"))
mod_c$coefficients[2]+mod_c$coefficients[3]
mean(y3[which(f3=="trt")])
mean(y3[which(f3=="trt2")])
mean(y3[which(f3=="ctrm")])
mean(y3[which(f3=="ctrl")])
mean(y3[which(f3=="trt")])
-(mod_c$coefficients[2]+mod_c$coefficients[3])
num(-(mod_c$coefficients[2]+mod_c$coefficients[3]))
numeric(-(mod_c$coefficients[2]+mod_c$coefficients[3]))
#BO+B1 = mean(y[b3])
mod_c$coefficients[1]+mod_c$coefficients[2]
mean(y3[which(f3=="trt")])
#B0+B2 = mean(y[])
mod_c$coefficients[1]+mod_c$coefficients[3]
mean(y3[which(f3=="ctrl")])
#B0+B3 = mean(y[trt2]) = B0 -B1 -B2
mod_c$coefficients[1]-mod_c$coefficients[2]-mod_c$coefficients[3]
mean(y3[which(f3=="trt2")])
f3
library(timevis)
data <- data.frame(
id = 1:3,
content = c("Tâche 1", "Tâche 2", "Tâche 3"),
start = c("2023-10-15", "2023-10-16", "2023-10-17"),
end = c("2023-10-18", "2023-10-20", "2023-10-19")
)
timevis(data)
dat <- data.frame(Names=c("Pierre", "John", "Mark", "Nathalie", "Nicolas"),
Tasks = c("Data Importation", "Quarto presentation", "AED", "Modeling", "AED"),
start = c("2012-02-06 07:27:57", "2012-02-06 08:27:57", "2012-02-06 09:27:57", "2012-02-06 10:27:57", "2012-02-06 10:27:57"),
end = c("2012-02-06 08:47:57"          ,           "2012-02-06 08:47:57", "2012-02-06 08:47:57", "2012-02-06 08:47:57", "2012-02-06 08:47:57"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 5))
vistime(dat, events="Names", groups="Tasks", title="Gantt chart")
visitime(dat, events="Names", groups="Tasks", title="Gantt chart")
vistime(dat, events="Names", groups="Tasks", title="Gantt chart")
library(timevis)
vistime(dat, events="Names", groups="Tasks", title="Gantt chart")
dat
timevis(dat)
library(vistime)
dat <- data.frame(Names=c("Pierre", "John", "Mark", "Nathalie", "Nicolas"),
Tasks = c("Data Importation", "Quarto presentation", "AED", "Modeling", "AED"),
start = c("2012-02-06 07:27:57", "2012-02-06 08:27:57", "2012-02-06 09:27:57", "2012-02-06 10:27:57", "2012-02-06 10:27:57"),
end = c("2012-02-06 08:47:57"          ,           "2012-02-06 08:47:57", "2012-02-06 08:47:57", "2012-02-06 08:47:57", "2012-02-06 08:47:57"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 5))
vistime(dat, events="Names", groups="Tasks", title="Gantt chart")
dat
dat <- data.frame(Names=c("Matis", "Alvin", "Flo", "Nathalie"),
Tasks = c("Gestion de Projet", "Quarto presentation", "AED", "Modeling", "AED"),
start = c("2012-02-06", "2012-02-07", "2012-02-08"),
end = c("2012-02-07 08:47:57","2012-02-08 08:47:57","2012-02-09"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 5))
dat <- data.frame(Names=c("Matis", "Alvin", "Flo"),
Tasks = c("Gestion de Projet", "Quarto presentation", "AED", "Modeling", "AED"),
start = c("2012-02-06", "2012-02-07", "2012-02-08"),
end = c("2012-02-07 08:47:57","2012-02-08 08:47:57","2012-02-09"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 5))
dat <- data.frame(Names=c("Matis", "Alvin", "Flo"),
Tasks = c("Gestion de Projet", "Quarto presentation","Rien"),
start = c("2012-02-06", "2012-02-07", "2012-02-08"),
end = c("2012-02-07 08:47:57","2012-02-08 08:47:57","2012-02-09"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 5))
dat <- data.frame(Names=c("Matis", "Alvin", "Flo"),
Tasks = c("Gestion de Projet", "Quarto presentation","Rien"),
start = c("2012-02-06", "2012-02-07", "2012-02-08"),
end = c("2012-02-07 08:47:57","2012-02-08 08:47:57","2012-02-09"),
color = c("#3e6b80", "#af7a6d", "#84a59d", "#d9bf77", "#6d4f47"),
fontcolor = rep("white", 3))
dat <- data.frame(Names=c("Alvin", "Alvin", "Alvin"),
Tasks = c("Gestion de Projet", "Quarto presentation","Rien"),
start = c("2012-02-06", "2012-02-07", "2012-02-08"),
end = c("2012-02-07 08:47:57","2012-02-08 08:47:57","2012-02-09"),
color = c("#3e6b80", "#af7a6d", "#84a59d"),
fontcolor = rep("white", 3))
vistime(dat, events="Names", groups="Tasks", title="Gantt chart")
dat
ggplot(resultats_agreges, aes(x = voisins, y = x)) +
geom_point()+geom_line(group=1)+
labs(x = "Voisins", y = "Moyenne du Score")
#Score moyen en  fonction de proba
plot(aggregate(data$score, list(proba = data$proba), mean))
lines(aggregate(data$score, list(proba = data$proba), mean))
library(fpp3)
data <- read.csv(file="matrice_voisins.txt")
#Evolution du score en fonction du
ggplot(data, aes(x = proba, y = score, color = as.factor(voisins))) +
geom_point() + geom_line()+
labs(x = "Proba", y = "Score", color = "Voisins") +
scale_color_discrete(name = "Voisins")
ggplot(resultats_agreges, aes(x = voisins, y = x)) +
geom_point()+geom_line(group=1)+
labs(x = "Voisins", y = "Moyenne du Score")
resultats_agreges <- aggregate(data$score, list(voisins = data$voisins), mean)
setwd("C:/Users/mbrei/Desktop/MIASHS/TER/R")
data <- read.csv(file="data/matrice_voisins.txt")
str(data)
data$voisins <- as.factor(data$voisins)
#Evolution du score en fonction du
ggplot(data, aes(x = proba, y = score, color = as.factor(voisins))) +
geom_point() + geom_line()+
labs(x = "Proba", y = "Score", color = "Voisins") +
scale_color_discrete(name = "Voisins")
resultats_agreges <- aggregate(data$score, list(voisins = data$voisins), mean)
ggplot(resultats_agreges, aes(x = voisins, y = x)) +
geom_point()+geom_line(group=1)+
labs(x = "Voisins", y = "Moyenne du Score")
#Score moyen en  fonction de proba
plot(aggregate(data$score, list(proba = data$proba), mean))
lines(aggregate(data$score, list(proba = data$proba), mean))
#Création de raster : EXEMPLE
library(raster)
# R de GIT :
avi_dat <- read.csv(file = "Data_SwissBreedingBirds.csv")
# R de GIT :
avi_dat <- read.csv(file = "data/Data_SwissBreedingBirds.csv")
avi_dat
avi_cols <- c('Turdus_torquatus', 'bio_5', 'bio_2', 'bio_14', 'std', 'rad', 'blockCV_tile')
avi_df <- data.frame(avi_dat)[avi_cols]
summary(avi_df)
bio_curr <- getData('worldclim', var='bio', res=0.5, lon=5.5, lat=45.5, path='data',download=T)[[c(2,5,14)]]
bio_curr
bio_fut <- getData('CMIP5', var='bio', res=0.5, lon=5.5, lat=45.5, rcp=45, model='NO', year=50, path='data', download=T)[[c(2,5,14)]]
bio_fut
bio_curr
setwd("C:/Users/mbrei/Desktop/MIASHS/TER/R/data")
abio <- read.csv2(file="enviroTab_pa_train.csv")
abio
library(sf)
install.packages("sf")
setwd("C:/Users/mbrei/Desktop/MIASHS/TER/R/data")
library(sf)
abio
place_sf <- st_as_sf(abio, coords = c("lon", "lat"), crs = 4326)
place_sf
library(maptiles)
install.packages("maptiles")
library(maptiles)
osm <- get_tiles(x = place_sf, zoom = 7)
plot_tiles(osm)
plot(st_geometry(place_sf), pch = 4, cex = 2, col = "red", add = TRUE)
