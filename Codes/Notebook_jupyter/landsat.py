# %%

import tensorflow as tf
from tensorflow.keras.layers import LayerNormalization, Conv2D, MaxPooling2D, Dense, Input, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.applications import ResNet50
import keras
import os
from keras.initializers import glorot_uniform
import numpy as np
from keras.callbacks import ReduceLROnPlateau
import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Activation, MaxPooling2D, Add, GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model
from scipy.interpolate import griddata


import pandas as pd
os.environ['CUDA_VISIBLE_DEVICES'] = '2'

# %%

def basic_block(input_tensor, filters, stride=1):
    x = Conv2D(filters, kernel_size=(3, 3), strides=stride, padding='same')(input_tensor)
    x = BatchNormalization()(x)
    x = Activation('relu')(x)

    x = Conv2D(filters, kernel_size=(3, 3), strides=1, padding='same')(x)
    x = BatchNormalization()(x)

    if stride != 1:
        input_tensor = Conv2D(filters, kernel_size=(1, 1), strides=stride, padding='same')(input_tensor)
        input_tensor = BatchNormalization()(input_tensor)

    x = Add()([x, input_tensor])
    x = Activation('relu')(x)
    return x

def build_resnet(input_shape, num_classes):
    input_tensor = Input(shape=input_shape)
    
    x = Conv2D(64, kernel_size=(3, 3), strides=1, padding='same')(input_tensor)
    x = BatchNormalization()(x)
    x = Activation('relu')(x)
    #x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)
    x = basic_block(x, filters=64, stride=1)
    x = basic_block(x, filters=64, stride=1)
    x = basic_block(x, filters=128, stride=2)
    x = basic_block(x, filters=128, stride=1)
    x = basic_block(x, filters=256, stride=2)
    x = basic_block(x, filters=256, stride=1)
    x = basic_block(x, filters=512, stride=2)
    x = basic_block(x, filters=512, stride=1)
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation ="sigmoid", name='last_hidden')(x)
    x = Dense(num_classes, activation='sigmoid')(x)
    model = Model(inputs=input_tensor, outputs=x)
    return model

# Définir la taille d'entrée et le nombre de classes
input_shape = (21, 12, 6)  # 6 canaux
num_classes = 5016  # Nombre de classes pour l'entraînement sur ImageNet, peut être ajusté pour votre tâche

# Construire le modèle ResNet-18
model = build_resnet(input_shape, num_classes)

# Afficher un résumé du modèle
model.summary()
model.compile(optimizer='Adam', loss='binary_crossentropy')

# %%

df_red = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-red.csv")
df_green = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-green.csv")
df_blue = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-blue.csv")
df_nir = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-nir.csv")
df_swir1 = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-swir1.csv")
df_swir2 = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-train-landsat-time-series-swir2.csv")

df_red.head()

# %%

image = np.zeros((21, 12, 6), dtype=np.float32)

dictionnaire = {}

for i in range(len(df_red)):
    print(i)
    copy = image.copy()
    year = 2000
    trim = 1
    index_trim = 0

    indice_year = 0

    while year < 2021 :
        nom_col = str(year)+"_"+str(trim)
        for k in range(3) :
            copy[year-2000][index_trim][0] = df_red[nom_col][i]
            copy[year-2000][index_trim][1] = df_green[nom_col][i]
            copy[year-2000][index_trim][2] = df_blue[nom_col][i]
            copy[year-2000][index_trim][3] = df_nir[nom_col][i]
            copy[year-2000][index_trim][4] = df_swir1[nom_col][i]
            copy[year-2000][index_trim][5] = df_swir2[nom_col][i]
            index_trim+=1

        
        trim +=1 
        if trim > 4 :
            trim = 1
            year+=1
            index_trim=0

    dictionnaire[df_red["surveyId"][i]] = copy

# %%

#for key in dictionnaire :
#    print(key)

#print(dictionnaire[222])

# %%

def interpolate_nan_landsat(t):
    """
    Cette fonction prend un vecteur NumPy à trois dimensions 
    et renvoie le même vecteur avec les NaN interpolés.
    """
    nan_mask = np.isnan(t)

    non_nan_indices = np.argwhere(~nan_mask)
    nan_indices = np.argwhere(nan_mask)

    image_moyenne =  np.array([
        [
            [
                19.4166, 20.3795, 21.9702, 19.9734, 20.7974, 21.6308, 20.4528,
                20.8819, 22.4678, 22.2884, 22.1281, 22.4875, 22.3550, 22.3501,
                22.6728, 21.3811, 22.3325, 23.6077, 23.3973, 23.7232, 22.8077
            ],
            [
                19.4166, 20.3795, 21.9702, 19.9734, 20.7974, 21.6308, 20.4528,
                20.8819, 22.4678, 22.2884, 22.1281, 22.4875, 22.3550, 22.3501,
                22.6728, 21.3811, 22.3325, 23.6077, 23.3973, 23.7232, 22.8077
            ],
            [
                19.4166, 20.3795, 21.9702, 19.9734, 20.7974, 21.6308, 20.4528,
                20.8819, 22.4678, 22.2884, 22.1281, 22.4875, 22.3550, 22.3501,
                22.6728, 21.3811, 22.3325, 23.6077, 23.3973, 23.7232, 22.8077
            ],
            [
                16.6450, 17.1069, 17.2020, 17.5985, 17.6938, 17.8059, 17.3662,
                18.3650, 18.3837, 17.8132, 18.3502, 18.6906, 18.6492, 20.0315,
                19.2886, 19.5098, 18.5437, 18.4419, 19.3745, 20.0990, 20.0243
            ],
            [
                16.6450, 17.1069, 17.2020, 17.5985, 17.6938, 17.8059, 17.3662,
                18.3650, 18.3837, 17.8132, 18.3502, 18.6906, 18.6492, 20.0315,
                19.2886, 19.5098, 18.5437, 18.4419, 19.3745, 20.0990, 20.0243
            ],
            [
                16.6450, 17.1069, 17.2020, 17.5985, 17.6938, 17.8059, 17.3662,
                18.3650, 18.3837, 17.8132, 18.3502, 18.6906, 18.6492, 20.0315,
                19.2886, 19.5098, 18.5437, 18.4419, 19.3745, 20.0990, 20.0243
            ],
            [
                16.2578, 16.3120, 16.0731, 15.9788, 15.8807, 15.9195, 16.0681,
                15.9396, 16.4654, 16.5541, 16.6434, 16.6010, 16.3519, 16.4586,
                16.4787, 16.1835, 16.2777, 16.5169, 16.4947, 16.2558, 15.9617
            ],
            [
                16.2578, 16.3120, 16.0731, 15.9788, 15.8807, 15.9195, 16.0681,
                15.9396, 16.4654, 16.5541, 16.6434, 16.6010, 16.3519, 16.4586,
                16.4787, 16.1835, 16.2777, 16.5169, 16.4947, 16.2558, 15.9617
            ],
            [
                16.2578, 16.3120, 16.0731, 15.9788, 15.8807, 15.9195, 16.0681,
                15.9396, 16.4654, 16.5541, 16.6434, 16.6010, 16.3519, 16.4586,
                16.4787, 16.1835, 16.2777, 16.5169, 16.4947, 16.2558, 15.9617
            ],
            [
                16.4599, 16.1407, 16.0814, 16.5255, 15.8122, 16.3502, 16.0448,
                16.2216, 16.4235, 16.6635, 16.4390, 16.2240, 16.4997, 16.6298,
                16.3222, 17.0760, 16.6550, 16.4839, 16.8045, 16.2259, 16.4788
            ],
            [
                16.4599, 16.1407, 16.0814, 16.5255, 15.8122, 16.3502, 16.0448,
                16.2216, 16.4235, 16.6635, 16.4390, 16.2240, 16.4997, 16.6298,
                16.3222, 17.0760, 16.6550, 16.4839, 16.8045, 16.2259, 16.4788
            ],
            [
                16.4599, 16.1407, 16.0814, 16.5255, 15.8122, 16.3502, 16.0448,
                16.2216, 16.4235, 16.6635, 16.4390, 16.2240, 16.4997, 16.6298,
                16.3222, 17.0760, 16.6550, 16.4839, 16.8045, 16.2259, 16.4788
            ]
        ],

        [
            [
                19.8958, 20.7465, 22.0633, 20.4989, 21.1510, 21.8635, 20.9038,
                20.9796, 22.5233, 22.3862, 22.0797, 22.4533, 22.1723, 22.2049,
                22.4015, 21.2829, 22.2271, 23.2879, 23.1824, 23.3681, 22.5585
            ],
            [
                19.8958, 20.7465, 22.0633, 20.4989, 21.1510, 21.8635, 20.9038,
                20.9796, 22.5233, 22.3862, 22.0797, 22.4533, 22.1723, 22.2049,
                22.4015, 21.2829, 22.2271, 23.2879, 23.1824, 23.3681, 22.5585
            ],
            [
                19.8958, 20.7465, 22.0633, 20.4989, 21.1510, 21.8635, 20.9038,
                20.9796, 22.5233, 22.3862, 22.0797, 22.4533, 22.1723, 22.2049,
                22.4015, 21.2829, 22.2271, 23.2879, 23.1824, 23.3681, 22.5585
            ],
            [
                17.2545, 17.5353, 17.6939, 17.8581, 18.3281, 18.0396, 17.7926,
                18.6092, 18.5420, 18.2842, 18.5102, 18.9889, 19.0777, 20.0596,
                19.7364, 19.8451, 18.8580, 18.8294, 19.6386, 20.1628, 20.0437
            ],
            [
                17.2545, 17.5353, 17.6939, 17.8581, 18.3281, 18.0396, 17.7926,
                18.6092, 18.5420, 18.2842, 18.5102, 18.9889, 19.0777, 20.0596,
                19.7364, 19.8451, 18.8580, 18.8294, 19.6386, 20.1628, 20.0437
            ],
            [
                17.2545, 17.5353, 17.6939, 17.8581, 18.3281, 18.0396, 17.7926,
                18.6092, 18.5420, 18.2842, 18.5102, 18.9889, 19.0777, 20.0596,
                19.7364, 19.8451, 18.8580, 18.8294, 19.6386, 20.1628, 20.0437
            ],
            [
                17.0349, 17.1099, 16.9902, 16.8209, 16.8574, 16.7380, 16.8521,
                16.7816, 17.2370, 17.3016, 17.3718, 17.3771, 17.2441, 17.3662,
                17.3627, 17.2216, 17.2230, 17.4919, 17.3360, 17.1971, 17.0578
            ],
            [
                17.0349, 17.1099, 16.9902, 16.8209, 16.8574, 16.7380, 16.8521,
                16.7816, 17.2370, 17.3016, 17.3718, 17.3771, 17.2441, 17.3662,
                17.3627, 17.2216, 17.2230, 17.4919, 17.3360, 17.1971, 17.0578
            ],
            [
                17.0349, 17.1099, 16.9902, 16.8209, 16.8574, 16.7380, 16.8521,
                16.7816, 17.2370, 17.3016, 17.3718, 17.3771, 17.2441, 17.3662,
                17.3627, 17.2216, 17.2230, 17.4919, 17.3360, 17.1971, 17.0578
            ],
            [
                16.9455, 16.7187, 16.5679, 17.0469, 16.5780, 16.8021, 16.6103,
                16.7997, 17.0459, 17.3608, 17.0095, 16.8498, 16.9115, 17.0987,
                16.8622, 17.8079, 17.1203, 16.9987, 17.1164, 16.7623, 17.1728
            ],
            [
                16.9455, 16.7187, 16.5679, 17.0469, 16.5780, 16.8021, 16.6103,
                16.7997, 17.0459, 17.3608, 17.0095, 16.8498, 16.9115, 17.0987,
                16.8622, 17.8079, 17.1203, 16.9987, 17.1164, 16.7623, 17.1728
            ],
            [
                16.9455, 16.7187, 16.5679, 17.0469, 16.5780, 16.8021, 16.6103,
                16.7997, 17.0459, 17.3608, 17.0095, 16.8498, 16.9115, 17.0987,
                16.8622, 17.8079, 17.1203, 16.9987, 17.1164, 16.7623, 17.1728
            ]
        ],

        [
            [
                11.8804, 12.5745, 13.9569, 12.4750, 12.9570, 13.6588, 12.8746,
                12.7612, 14.3464, 14.3637, 13.9422, 14.3299, 14.2487, 14.2773,
                14.4403, 13.7745, 14.3865, 15.7047, 15.5397, 15.5343, 14.9561
            ],
            [
                11.8804, 12.5745, 13.9569, 12.4750, 12.9570, 13.6588, 12.8746,
                12.7612, 14.3464, 14.3637, 13.9422, 14.3299, 14.2487, 14.2773,
                14.4403, 13.7745, 14.3865, 15.7047, 15.5397, 15.5343, 14.9561
            ],
            [
                11.8804, 12.5745, 13.9569, 12.4750, 12.9570, 13.6588, 12.8746,
                12.7612, 14.3464, 14.3637, 13.9422, 14.3299, 14.2487, 14.2773,
                14.4403, 13.7745, 14.3865, 15.7047, 15.5397, 15.5343, 14.9561
            ],
            [
                8.8465,  9.1658,  9.3085,  9.5571,  9.9491,  9.6497,  9.4429,
                10.1541, 10.1509, 10.0259, 10.1382, 10.6003, 10.8478, 11.7221,
                11.4021, 11.4966, 10.4714, 10.4767, 11.2359, 11.8922, 11.7252
            ],
            [
                8.8465,  9.1658,  9.3085,  9.5571,  9.9491,  9.6497,  9.4429,
                10.1541, 10.1509, 10.0259, 10.1382, 10.6003, 10.8478, 11.7221,
                11.4021, 11.4966, 10.4714, 10.4767, 11.2359, 11.8922, 11.7252
            ],
            [
                8.8465,  9.1658,  9.3085,  9.5571,  9.9491,  9.6497,  9.4429,
                10.1541, 10.1509, 10.0259, 10.1382, 10.6003, 10.8478, 11.7221,
                11.4021, 11.4966, 10.4714, 10.4767, 11.2359, 11.8922, 11.7252
            ],
            [ 
                8.7592,  8.8085,  8.6926,  8.5508,  8.6107,  8.4549,  8.5191,
                8.5963,  8.9209,  8.9193,  8.9811,  9.0957,  9.0312,  8.9665,
                9.0169,  8.9154,  8.9452,  9.1511,  8.8921,  8.9410,  8.7464
            ],
            [ 
                8.7592,  8.8085,  8.6926,  8.5508,  8.6107,  8.4549,  8.5191,
                8.5963,  8.9209,  8.9193,  8.9811,  9.0957,  9.0312,  8.9665,
                9.0169,  8.9154,  8.9452,  9.1511,  8.8921,  8.9410,  8.7464
            ],
            [ 
                8.7592,  8.8085,  8.6926,  8.5508,  8.6107,  8.4549,  8.5191,
                8.5963,  8.9209,  8.9193,  8.9811,  9.0957,  9.0312,  8.9665,
                9.0169,  8.9154,  8.9452,  9.1511,  8.8921,  8.9410,  8.7464
            ],
            [
                8.8691,  8.6688,  8.5650,  8.9434,  8.5411,  8.8081,  8.5754,
                8.7214,  9.0064,  9.2190,  8.9477,  8.8124,  8.9504,  9.0647,
                8.9227, 10.0105,  9.2525,  9.1353,  9.0740,  8.8239,  9.2133
            ],
            [
                8.8691,  8.6688,  8.5650,  8.9434,  8.5411,  8.8081,  8.5754,
                8.7214,  9.0064,  9.2190,  8.9477,  8.8124,  8.9504,  9.0647,
                8.9227, 10.0105,  9.2525,  9.1353,  9.0740,  8.8239,  9.2133
            ],
            [
                8.8691,  8.6688,  8.5650,  8.9434,  8.5411,  8.8081,  8.5754,
                8.7214,  9.0064,  9.2190,  8.9477,  8.8124,  8.9504,  9.0647,
                8.9227, 10.0105,  9.2525,  9.1353,  9.0740,  8.8239,  9.2133
            ]
        ],

        [
            [
                64.2370, 65.0688, 66.2738, 64.8664, 64.9425, 65.8638, 64.7803,
                64.1585, 65.5285, 65.4408, 65.2159, 66.3211, 65.6623, 65.2896,
                65.7135, 64.1109, 64.5773, 66.1677, 66.2275, 64.4388, 65.0049
            ],
            [
                64.2370, 65.0688, 66.2738, 64.8664, 64.9425, 65.8638, 64.7803,
                64.1585, 65.5285, 65.4408, 65.2159, 66.3211, 65.6623, 65.2896,
                65.7135, 64.1109, 64.5773, 66.1677, 66.2275, 64.4388, 65.0049
            ],
            [
                64.2370, 65.0688, 66.2738, 64.8664, 64.9425, 65.8638, 64.7803,
                64.1585, 65.5285, 65.4408, 65.2159, 66.3211, 65.6623, 65.2896,
                65.7135, 64.1109, 64.5773, 66.1677, 66.2275, 64.4388, 65.0049
            ],
            [
                65.2340, 63.8465, 64.5866, 63.5313, 63.4829, 62.9878, 64.5359,
                64.5152, 63.4717, 65.1430, 63.2913, 64.7121, 65.8953, 67.0043,
                68.9044, 68.0894, 66.3732, 66.2391, 66.8440, 66.2493, 66.7620
            ],
            [
                65.2340, 63.8465, 64.5866, 63.5313, 63.4829, 62.9878, 64.5359,
                64.5152, 63.4717, 65.1430, 63.2913, 64.7121, 65.8953, 67.0043,
                68.9044, 68.0894, 66.3732, 66.2391, 66.8440, 66.2493, 66.7620
            ],
            [
                65.2340, 63.8465, 64.5866, 63.5313, 63.4829, 62.9878, 64.5359,
                64.5152, 63.4717, 65.1430, 63.2913, 64.7121, 65.8953, 67.0043,
                68.9044, 68.0894, 66.3732, 66.2391, 66.8440, 66.2493, 66.7620
            ],
            [
                65.7158, 65.9533, 66.1937, 64.5258, 65.4429, 64.9137, 65.1459,
                65.6191, 65.2819, 65.2172, 65.3173, 65.6761, 65.9889, 68.0144,
                67.7405, 68.1550, 69.0995, 68.2167, 66.8035, 67.5963, 68.2608
            ],
            [
                65.7158, 65.9533, 66.1937, 64.5258, 65.4429, 64.9137, 65.1459,
                65.6191, 65.2819, 65.2172, 65.3173, 65.6761, 65.9889, 68.0144,
                67.7405, 68.1550, 69.0995, 68.2167, 66.8035, 67.5963, 68.2608
            ],
            [
                65.7158, 65.9533, 66.1937, 64.5258, 65.4429, 64.9137, 65.1459,
                65.6191, 65.2819, 65.2172, 65.3173, 65.6761, 65.9889, 68.0144,
                67.7405, 68.1550, 69.0995, 68.2167, 66.8035, 67.5963, 68.2608
            ],
            [
                64.4112, 64.0054, 63.6425, 63.5620, 64.1532, 62.8204, 63.4518,
                63.7679, 64.1111, 64.4095, 63.4653, 64.2133, 62.4441, 63.4995,
                63.8767, 63.2294, 64.1665, 63.2255, 63.1710, 63.0719, 64.5629
            ],
            [
                64.4112, 64.0054, 63.6425, 63.5620, 64.1532, 62.8204, 63.4518,
                63.7679, 64.1111, 64.4095, 63.4653, 64.2133, 62.4441, 63.4995,
                63.8767, 63.2294, 64.1665, 63.2255, 63.1710, 63.0719, 64.5629
            ],
            [
                64.4112, 64.0054, 63.6425, 63.5620, 64.1532, 62.8204, 63.4518,
                63.7679, 64.1111, 64.4095, 63.4653, 64.2133, 62.4441, 63.4995,
                63.8767, 63.2294, 64.1665, 63.2255, 63.1710, 63.0719, 64.5629
            ]
        ],

        [
            [
                46.2082, 46.5521, 45.9355, 45.3831, 46.3670, 45.5518, 45.6243,
                46.8390, 45.4157, 45.2150, 45.7943, 44.9369, 45.3723, 45.4527,
                46.2797, 44.1341, 45.4445, 44.6877, 45.9528, 46.2285, 46.0595
            ],
             [
                46.2082, 46.5521, 45.9355, 45.3831, 46.3670, 45.5518, 45.6243,
                46.8390, 45.4157, 45.2150, 45.7943, 44.9369, 45.3723, 45.4527,
                46.2797, 44.1341, 45.4445, 44.6877, 45.9528, 46.2285, 46.0595
            ],
             [
                46.2082, 46.5521, 45.9355, 45.3831, 46.3670, 45.5518, 45.6243,
                46.8390, 45.4157, 45.2150, 45.7943, 44.9369, 45.3723, 45.4527,
                46.2797, 44.1341, 45.4445, 44.6877, 45.9528, 46.2285, 46.0595
            ],
            [
                49.7163, 50.1696, 50.1030, 50.0017, 50.1989, 49.9531, 49.9119,
                50.0325, 50.3790, 49.0422, 49.7057, 49.8797, 48.9288, 49.5910,
                49.6559, 49.7236, 50.1626, 49.8251, 49.9070, 50.9290, 49.8830
            ],
            [
                49.7163, 50.1696, 50.1030, 50.0017, 50.1989, 49.9531, 49.9119,
                50.0325, 50.3790, 49.0422, 49.7057, 49.8797, 48.9288, 49.5910,
                49.6559, 49.7236, 50.1626, 49.8251, 49.9070, 50.9290, 49.8830
            ],
            [
                49.7163, 50.1696, 50.1030, 50.0017, 50.1989, 49.9531, 49.9119,
                50.0325, 50.3790, 49.0422, 49.7057, 49.8797, 48.9288, 49.5910,
                49.6559, 49.7236, 50.1626, 49.8251, 49.9070, 50.9290, 49.8830
            ],
            [
                48.8914, 49.2093, 48.9918, 48.3834, 48.6277, 48.5023, 49.1779,
                47.8779, 48.7934, 48.8871, 49.2690, 49.2135, 48.3055, 49.7312,
                49.6855, 48.7900, 49.3785, 49.6315, 49.5481, 49.2159, 48.8792
            ],
            [
                48.8914, 49.2093, 48.9918, 48.3834, 48.6277, 48.5023, 49.1779,
                47.8779, 48.7934, 48.8871, 49.2690, 49.2135, 48.3055, 49.7312,
                49.6855, 48.7900, 49.3785, 49.6315, 49.5481, 49.2159, 48.8792
            ],
            [
                48.8914, 49.2093, 48.9918, 48.3834, 48.6277, 48.5023, 49.1779,
                47.8779, 48.7934, 48.8871, 49.2690, 49.2135, 48.3055, 49.7312,
                49.6855, 48.7900, 49.3785, 49.6315, 49.5481, 49.2159, 48.8792
            ],
            [
                48.1112, 48.2074, 47.3245, 48.1863, 47.4889, 47.8571, 47.7600,
                48.0968, 47.8636, 47.4771, 48.1137, 47.9496, 47.5340, 48.3756,
                48.4697, 47.5168, 47.3803, 47.7889, 48.6369, 47.7470, 48.2582
            ],
             [
                48.1112, 48.2074, 47.3245, 48.1863, 47.4889, 47.8571, 47.7600,
                48.0968, 47.8636, 47.4771, 48.1137, 47.9496, 47.5340, 48.3756,
                48.4697, 47.5168, 47.3803, 47.7889, 48.6369, 47.7470, 48.2582
            ],
             [
                48.1112, 48.2074, 47.3245, 48.1863, 47.4889, 47.8571, 47.7600,
                48.0968, 47.8636, 47.4771, 48.1137, 47.9496, 47.5340, 48.3756,
                48.4697, 47.5168, 47.3803, 47.7889, 48.6369, 47.7470, 48.2582
            ]
        ],

        [
            [
                25.7106, 26.2366, 25.8590, 25.4931, 26.2236, 25.7302, 25.7776,
                26.7747, 25.7218, 25.5776, 25.9554, 25.1782, 25.3527, 25.4564,
                25.8758, 24.5060, 25.1724, 24.7790, 25.7379, 26.1550, 25.7090
            ],
            [
                25.7106, 26.2366, 25.8590, 25.4931, 26.2236, 25.7302, 25.7776,
                26.7747, 25.7218, 25.5776, 25.9554, 25.1782, 25.3527, 25.4564,
                25.8758, 24.5060, 25.1724, 24.7790, 25.7379, 26.1550, 25.7090
            ],
            [
                25.7106, 26.2366, 25.8590, 25.4931, 26.2236, 25.7302, 25.7776,
                26.7747, 25.7218, 25.5776, 25.9554, 25.1782, 25.3527, 25.4564,
                25.8758, 24.5060, 25.1724, 24.7790, 25.7379, 26.1550, 25.7090
            ],
            [
                27.4828, 27.7122, 27.6821, 27.6045, 28.3499, 27.9051, 27.6345,
                27.8584, 28.1174, 26.9824, 27.7390, 27.7237, 26.8582, 27.1347,
                26.9902, 27.1474, 27.1999, 27.1296, 27.3176, 28.3077, 27.3845
            ],
            [
                27.4828, 27.7122, 27.6821, 27.6045, 28.3499, 27.9051, 27.6345,
                27.8584, 28.1174, 26.9824, 27.7390, 27.7237, 26.8582, 27.1347,
                26.9902, 27.1474, 27.1999, 27.1296, 27.3176, 28.3077, 27.3845
            ],
            [
                27.4828, 27.7122, 27.6821, 27.6045, 28.3499, 27.9051, 27.6345,
                27.8584, 28.1174, 26.9824, 27.7390, 27.7237, 26.8582, 27.1347,
                26.9902, 27.1474, 27.1999, 27.1296, 27.3176, 28.3077, 27.3845
            ],
            [
                27.0408, 27.0192, 26.7572, 26.8136, 26.8283, 26.6573, 27.1829,
                26.1998, 26.8480, 27.0954, 27.2444, 27.2337, 26.3691, 27.0536,
                27.0085, 26.3630, 26.6280, 26.8328, 26.7268, 26.6838, 26.2246
            ],
            [
                27.0408, 27.0192, 26.7572, 26.8136, 26.8283, 26.6573, 27.1829,
                26.1998, 26.8480, 27.0954, 27.2444, 27.2337, 26.3691, 27.0536,
                27.0085, 26.3630, 26.6280, 26.8328, 26.7268, 26.6838, 26.2246
            ],
            [
                27.0408, 27.0192, 26.7572, 26.8136, 26.8283, 26.6573, 27.1829,
                26.1998, 26.8480, 27.0954, 27.2444, 27.2337, 26.3691, 27.0536,
                27.0085, 26.3630, 26.6280, 26.8328, 26.7268, 26.6838, 26.2246
            ],
            [
                26.6016, 26.4976, 25.9830, 26.7646, 25.8259, 26.4590, 26.4437,
                26.4520, 26.3573, 26.1995, 26.5703, 26.4208, 25.9827, 26.5465,
                26.4517, 26.0086, 25.8532, 26.1798, 26.8862, 26.1164, 26.3882
            ],
            [
                26.6016, 26.4976, 25.9830, 26.7646, 25.8259, 26.4590, 26.4437,
                26.4520, 26.3573, 26.1995, 26.5703, 26.4208, 25.9827, 26.5465,
                26.4517, 26.0086, 25.8532, 26.1798, 26.8862, 26.1164, 26.3882
            ],
            [
                26.6016, 26.4976, 25.9830, 26.7646, 25.8259, 26.4590, 26.4437,
                26.4520, 26.3573, 26.1995, 26.5703, 26.4208, 25.9827, 26.5465,
                26.4517, 26.0086, 25.8532, 26.1798, 26.8862, 26.1164, 26.3882
            ]
        ]
    ])

    if np.all(nan_mask):
        return np.transpose(image_moyenne, (2, 1, 0))

    non_nan_values = t[~nan_mask]

    interpolated_values = griddata(non_nan_indices, non_nan_values, nan_indices, method='nearest')

    t[nan_mask] = interpolated_values

    return t

# %%

dictionnaire_int = {}

for key in dictionnaire :
    dictionnaire_int[key] = interpolate_nan_landsat(dictionnaire[key])
    #images_interpole.append(interpolate_nan_landsat(img))

# %%

#dictionnaire[222]


# %%


train = pd.read_csv("/home/data/ter_meduse_log/our_data/data_ter_distribution/outputed_csv/all_infos.csv")
selection = train.iloc[:, [1] + list(range(52, len(train.columns)))]
X = np.zeros((len(selection), 21, 12, 6), dtype=np.float32)
y = []
for i in range(len(selection)):
    print(i)
    y.append(selection.iloc[i, 1:])
    X[i] = dictionnaire_int[selection["surveyId"][i]]

print(X[0])
print(y[0])
#X = np.array(X)
y = np.array(y)
print(X.shape)
print(y.shape)

# %%

batch_size=32

history = model.fit(X,
 y, 
 batch_size=batch_size, 
 epochs=20
 )

# %%

df_red_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-red.csv")
df_green_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-green.csv")
df_blue_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-blue.csv")
df_nir_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-nir.csv")
df_swir1_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-swir1.csv")
df_swir2_t = pd.read_csv("/home/data/ter_meduse_log/our_data/output/SatelliteTimeSeries/GLC24-PA-test-landsat-time-series-swir2.csv")

# %%



dictionnaire_t = {}

for i in range(len(df_red_t)):
    print(i)
    copy = image.copy()
    year = 2000
    trim = 1

    index_trim = 0

    while year < 2021 :
        nom_col = str(year)+"_"+str(trim)
        for k in range(3):
            copy[year-2000][index_trim][0] = df_red_t[nom_col][i]
            copy[year-2000][index_trim][1] = df_green_t[nom_col][i]
            copy[year-2000][index_trim][2] = df_blue_t[nom_col][i]
            copy[year-2000][index_trim][3] = df_nir_t[nom_col][i]
            copy[year-2000][index_trim][4] = df_swir1_t[nom_col][i]
            copy[year-2000][index_trim][5] = df_swir2_t[nom_col][i]
            index_trim+=1

        trim +=1 
        if trim > 4 :
            trim = 1
            year+=1
            index_trim=0

    dictionnaire_t[df_red_t["surveyId"][i]] = copy

# %%

test = pd.read_csv("../../../our_data/output/PresenceAbsenceSurveys/GLC24-PA-metadata-test.csv")
test = test[["surveyId"]]


X_test = []
for i in range(len(test)):
    X_test.append(dictionnaire_t[test["surveyId"][i]])
X_test = np.array(X_test)

predictions = model.predict(X_test)

# %%



last_hidden_layer = model.get_layer('last_hidden').output

feature_extractor = Model(inputs=model.input, outputs=last_hidden_layer)

#feature_extractor.summary()

# %%


features = feature_extractor.predict(X_test)
features_train = feature_extractor.predict(X)
#features_train
# %%

df_features = pd.DataFrame(features)
df_features["surveyId"] = test["surveyId"].to_list()
df_features["type"] = "test"
df_features2 = pd.DataFrame(features_train)
df_features2["surveyId"] = selection["surveyId"].to_list()
df_features2["type"] = "train"


global_features = pd.concat([df_features, df_features2])

# %%

global_features.to_csv("../../../our_data/data_ter_distribution/outputed_csv/features20_landsat_1024sigmoid.csv")


for i in range(1, len(selection.columns)):
    print(i)
    liste_espece = []
    for j in range(len(test)):
        liste_espece.append(predictions[j][i-1])
    test[selection.columns[i]] = liste_espece

test.to_csv('../../../our_data/data_ter_distribution/outputed_csv/result/cnn_landsat20_hidden_sigmoid1024.csv')

